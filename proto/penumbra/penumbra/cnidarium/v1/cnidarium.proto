syntax = "proto3";

package penumbra.cnidarium.v1;

import "ibc/core/commitment/v1/commitment.proto";

service QueryService {
  // General-purpose key-value state query API, that can be used to query
  // arbitrary keys in the JMT storage.
  rpc KeyValue(KeyValueRequest) returns (KeyValueResponse);

  // General-purpose key-value state query API, that can be used to query
  // arbitrary keys in the non-verifiable storage.
  rpc NonVerifiableKeyValue(NonVerifiableKeyValueRequest) returns (NonVerifiableKeyValueResponse);

  // General-purpose prefixed key-value state query API, that can be used to query
  // arbitrary prefixes in the JMT storage.
  rpc PrefixValue(PrefixValueRequest) returns (stream PrefixValueResponse);

  // Subscribes to a stream of key-value updates, with regex filtering on keys.
  rpc Watch(WatchRequest) returns (stream WatchResponse);
}

// Performs a key-value query against the nonverifiable storage,
// using a byte-encoded key.
message NonVerifiableKeyValueRequest {
    message Key {
        bytes inner = 1;
    }

    Key key = 1;
}

message NonVerifiableKeyValueResponse {
  message Value {
    bytes value = 1;
  }
  // The value corresponding to the specified key, if it was found.
  Value value = 1;
}

// Performs a key-value query against the JMT, either by key or by key hash.
//
// Proofs are only supported by key.
message KeyValueRequest {
  // If set, the key to fetch from storage.
  string key = 2;
  // whether to return a proof
  bool proof = 3;
}

message KeyValueResponse {
  message Value {
    bytes value = 1;
  }
  // The value corresponding to the specified key, if it was found.
  Value value = 1;
  // A proof of existence or non-existence.
  .ibc.core.commitment.v1.MerkleProof proof = 2;
}

// Performs a prefixed key-value query, by string prefix.
message PrefixValueRequest {
  // The prefix to fetch subkeys from storage.
  string prefix = 2;
}

message PrefixValueResponse {
  string key = 1;
  bytes value = 2;
}

// Requests a stream of new key-value pairs that have been committed to the state.
message WatchRequest {
  // A regex for keys in the verifiable storage.
  //
  // Only key-value updates whose keys match this regex will be returned.
  // Note that the empty string matches all keys.
  // To exclude all keys, use the regex "$^", which matches no strings.
  string key_regex = 1;
  // A regex for keys in the nonverifiable storage.
  //
  // Only key-value updates whose keys match this regex will be returned.
  // Note that the empty string matches all keys.
  // To exclude all keys, use the regex "$^", which matches no strings.
  string nv_key_regex = 2;
}

// A key-value pair that has been committed to the state.
message WatchResponse {
  // Elements of the verifiable storage have string keys.
  message KeyValue {
    string key = 1;
    bytes value = 2;
    // If set to true, the key-value pair was deleted.
    // This allows distinguishing a deleted key-value pair from a key-value pair whose value is empty.
    bool deleted = 3;
  }
  // Elements of the nonverifiable storage have byte keys.
  message NvKeyValue {
    bytes key = 1;
    bytes value = 2;
    // If set to true, the key-value pair was deleted.
    // This allows distinguishing a deleted key-value pair from a key-value pair whose value is empty.
    bool deleted = 3;
  }

  // The state version the key-value pair was committed at.
  uint64 version = 1;

  // The entry that was committed.
  oneof entry {
    KeyValue kv = 5;
    NvKeyValue nv_kv = 6;
  }
}
