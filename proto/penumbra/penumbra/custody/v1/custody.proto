syntax = "proto3";

package penumbra.custody.v1;

import "penumbra/core/component/governance/v1/governance.proto";
import "penumbra/core/component/stake/v1/stake.proto";
import "penumbra/core/keys/v1/keys.proto";
import "penumbra/core/transaction/v1/transaction.proto";
import "penumbra/crypto/decaf377_rdsa/v1/decaf377_rdsa.proto";

// The custody protocol is used by a wallet client to request authorization for
// a transaction they've constructed.
//
// Modeling transaction authorization as an asynchronous RPC call encourages
// software to be written in a way that has a compatible data flow with a "soft
// HSM", threshold signing, a hardware wallet, etc.
//
// The custody protocol does not trust the client to authorize spends, so
// custody requests must contain sufficient information for the custodian to
// understand the transaction and determine whether or not it should be
// authorized.
service CustodyService {
  // Requests authorization of the transaction with the given description.
  rpc Authorize(AuthorizeRequest) returns (AuthorizeResponse);

  // Requests authorization of the given validator definition update.
  rpc AuthorizeValidatorDefinition(AuthorizeValidatorDefinitionRequest) returns (AuthorizeValidatorDefinitionResponse);

  // Requests authorization of the given validator vote.
  rpc AuthorizeValidatorVote(AuthorizeValidatorVoteRequest) returns (AuthorizeValidatorVoteResponse);

  // Requests the full viewing key from the custodian.
  //
  // Custody backends should decide whether to honor this request, and how to
  // control access to it.
  rpc ExportFullViewingKey(ExportFullViewingKeyRequest) returns (ExportFullViewingKeyResponse);

  // Displays an address to a user for confirmation.
  //
  // Custody backends with user interaction should present the address to the
  // user and wait for explicit confirmation before returning.
  //
  // Non-interactive custody backends may return immediately.
  rpc ConfirmAddress(ConfirmAddressRequest) returns (ConfirmAddressResponse);
}

message AuthorizeRequest {
  // The transaction plan to authorize.
  core.transaction.v1.TransactionPlan plan = 1;

  // Optionally, pre-authorization data, if required by the custodian.
  //
  // Pre-authorization data is backend-specific, and backends are free to ignore it.
  //
  // Multiple `PreAuthorization` packets can be included in a single request,
  // to support multi-party pre-authorizations.
  repeated PreAuthorization pre_authorizations = 3;
}

message AuthorizeResponse {
  core.transaction.v1.AuthorizationData data = 1;
}

message AuthorizeValidatorDefinitionRequest {
  // The validator definition to authorize.
  core.component.stake.v1.Validator validator_definition = 1;

  // Optionally, pre-authorization data, if required by the custodian.
  //
  // Pre-authorization data is backend-specific, and backends are free to ignore it.
  //
  // Multiple `PreAuthorization` packets can be included in a single request,
  // to support multi-party pre-authorizations.
  repeated PreAuthorization pre_authorizations = 3;
}

message AuthorizeValidatorDefinitionResponse {
  // The authorization signature for the validator definition.
  crypto.decaf377_rdsa.v1.SpendAuthSignature validator_definition_auth = 1;
}

message AuthorizeValidatorVoteRequest {
  // The validator vote to authorize.
  core.component.governance.v1.ValidatorVoteBody validator_vote = 1;

  // Optionally, pre-authorization data, if required by the custodian.
  //
  // Pre-authorization data is backend-specific, and backends are free to ignore it.
  //
  // Multiple `PreAuthorization` packets can be included in a single request,
  // to support multi-party pre-authorizations.
  repeated PreAuthorization pre_authorizations = 3;
}

message AuthorizeValidatorVoteResponse {
  // The authorization signature for the validator vote.
  crypto.decaf377_rdsa.v1.SpendAuthSignature validator_vote_auth = 1;
}

// A pre-authorization packet.  This allows a custodian to delegate (partial)
// signing authority to other authorization mechanisms.  Details of how a
// custodian manages those keys are out-of-scope for the custody protocol and
// are custodian-specific.
message PreAuthorization {
  // An Ed25519-based preauthorization, containing an Ed25519 signature over the
  // `TransactionPlan`.
  message Ed25519 {
    // The Ed25519 verification key used to verify the signature.
    bytes vk = 1;
    // The Ed25519 signature over the `TransactionPlan`.
    bytes sig = 2;
  }
  oneof pre_authorization {
    Ed25519 ed25519 = 1;
  }
}

message ExportFullViewingKeyRequest {}

message ExportFullViewingKeyResponse {
  // The full viewing key.
  core.keys.v1.FullViewingKey full_viewing_key = 1;
}

message ConfirmAddressRequest {
  core.keys.v1.AddressIndex address_index = 1;
}

message ConfirmAddressResponse {
  core.keys.v1.Address address = 1;
}
