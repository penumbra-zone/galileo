syntax = "proto3";

package penumbra.custody.threshold.v1;

import "penumbra/core/component/governance/v1/governance.proto";
import "penumbra/core/component/stake/v1/stake.proto";
import "penumbra/core/transaction/v1/transaction.proto";
import "penumbra/crypto/decaf377_frost/v1/decaf377_frost.proto";

// A key one can use to verify signatures.
//
// This key can also serve as a unique identifier for users.
message VerificationKey {
  bytes inner = 1;
}

// A signature proving that a message was created by the owner of a verification key.
message Signature {
  bytes inner = 1;
}

// The message the coordinator sends in round 1 of the signing protocol.
message CoordinatorRound1 {
  oneof request {
    // The plan that the coordinator would like the followers to sign.
    core.transaction.v1.TransactionPlan plan = 1;
    // The validator definition the coordinator would like the followers to sign.
    core.component.stake.v1.Validator validator_definition = 2;
    // The validator vote the coordinator would like the followers to sign.
    core.component.governance.v1.ValidatorVoteBody validator_vote = 3;
  }
}

// The message the coordinator sends in round 2 of the signing protocol.
message CoordinatorRound2 {
  // A commitment along with a FROST identifier.
  message IdentifiedCommitments {
    // The serialization of a FROST identifier.
    bytes identifier = 1;
    // The commitments this person has produced for this round of signing.
    crypto.decaf377_frost.v1.SigningCommitments commitments = 2;
  }

  // A FROST signing package without a message.
  //
  // We structure things this way because the message is derived from the transaction plan.
  // FROST expects the signing package to include the identified commitments *and*
  // the message, but we have no need to include the message.
  message PartialSigningPackage {
    repeated IdentifiedCommitments all_commitments = 1;
  }

  // The underlying signing packages being sent to the followers, for each signature.
  repeated PartialSigningPackage signing_packages = 1;
}

// The first message the followers send back to the coordinator when signing.
message FollowerRound1 {
  // The inner message that will be signed by the follower.
  message Inner {
    // One signing commitment pair for each signature requested by the plan, in order.
    repeated crypto.decaf377_frost.v1.SigningCommitments commitments = 1;
  }

  Inner inner = 1;
  // The verification key identifying the sender.
  VerificationKey pk = 2;
  // A signature over the proto-encoded bytes of inner.
  Signature sig = 3;
}

// The second message the followers send back to the coordinator when signing.
message FollowerRound2 {
  // The inner message that will be signed by the follower.
  message Inner {
    // One share for each signature requested by the plan, in order.
    repeated crypto.decaf377_frost.v1.SignatureShare shares = 1;
  }

  Inner inner = 1;
  // The verification key identifying the sender.
  VerificationKey pk = 2;
  // A signature over the proto-encoded bytes of inner.
  Signature sig = 3;
}

// The first message we broadcast in the DKG protocol.
message DKGRound1 {
  // The package we're sending to other people
  crypto.decaf377_frost.v1.DKGRound1Package pkg = 1;
  // A commitment to a share of the nullifier-deriving key
  bytes nullifier_commitment = 2;
  // An encryption key for the second round.
  bytes epk = 3;
  // A verification key establishing an identity for the sender of this message.
  bytes vk = 4;
}

// The second message we broadcast in the DKG protocol.
message DKGRound2 {
  // A round2 package, encrypted, along with an identifier for the recipient.
  message TargetedPackage {
    // A verification key identifying the recipient.
    bytes vk = 1;
    // The ciphertext of an encrypted frost package for round 2.
    bytes encrypted_package = 2;
  }

  // An inner message that will be signed.
  message Inner {
    // Encrypted packages for each recipient.
    repeated TargetedPackage encrypted_packages = 1;
    // An opening of the share of the nullifier-deriving key commitment
    bytes nullifier = 2;
  }

  Inner inner = 1;
  // The verification key identifying the sender.
  bytes vk = 2;
  // A signature over the proto-encoded inner message.
  bytes sig = 3;
}
